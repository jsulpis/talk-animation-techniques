---
import CodeBlock from "../../../components/CodeBlock.astro";
import FlexContainer from "../../../components/FlexContainer.astro";
import Slide from "../../../components/Slide.astro";
import CanvasWebGLTriangle from "./CanvasWebGLTriangle.svelte";

const { title } = Astro.props;
---

<Slide>
	<h1>{title + " "}</h1>
</Slide>

<Slide>
	<h1>{title + " "}</h1>
	<p>
		<strong>Usage:</strong> mettre une claque à vos utilisateurs à coup d'animations immersives
	</p>
</Slide>

<Slide sectionTitle={title} subSectionTitle={"Utilisation"}>
	<br />
	<FlexContainer gap="3rem">
		<FlexContainer direction={"column"} gap="0.5rem">
			<CodeBlock lang="HTML">
				{`<canvas width="400" height="400" />`}
			</CodeBlock>

			<div class="code-container">
				<span data-id="webgl-lang" class="code-lang">javascript</span>
				<pre
					data-id="webgl-pre"><code data-id="webgl-code" class="language-javascript">{
					`const canvas = document.querySelector("canvas");
const gl = canvas.getContext("webgl");







// Geometry
const vertexBuffer = gl.createBuffer();
gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
gl.bufferData(
  gl.ARRAY_BUFFER,
  new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]),
  gl.STATIC_DRAW
);

vertexBuffer.itemSize = 2;
vertexBuffer.numItems = 4;

// Shaders
const vertexShaderSource =
  "attribute vec2 a_position;" +
  "void main() { gl_Position = vec4 (a_position, 0,1); }";
const fragmentShaderSource =
  "precision mediump float;" +
  "void main() { gl_FragColor = vec4 (0.9,0,0.1,1); }";

const buildShader = function (shaderSource, typeOfShader) {
  const shader = gl.createShader(typeOfShader);
  gl.shaderSource(shader, shaderSource);
  gl.compileShader(shader);
  return shader;
};

const compiledVertexShader = buildShader(
  vertexShaderSource,
  gl.VERTEX_SHADER
);
const compiledFragmentShader = buildShader(
  fragmentShaderSource,
  gl.FRAGMENT_SHADER
);

// Setup GLSL program
const program = gl.createProgram();
gl.attachShader(program, compiledVertexShader);
gl.attachShader(program, compiledFragmentShader);
gl.linkProgram(program);
gl.useProgram(program);

// Draw
const positionLocation = gl.getAttribLocation(program, "a_position");
gl.enableVertexAttribArray(positionLocation);
gl.vertexAttribPointer(
  positionLocation,
  vertexBuffer.itemSize,
  gl.FLOAT,
  false,
  0,
  0
);
gl.drawArrays(gl.TRIANGLE_STRIP, 0, vertexBuffer.numItems);`}</code></pre>
			</div>
		</FlexContainer>
		<CanvasWebGLTriangle client:visible />
	</FlexContainer>
</Slide>

<style lang="scss">
	.code-container code {
		transform: none !important;
		height: auto !important;

		max-height: 35vh !important;
		max-width: 60vw;
		max-width: 60vw;
		overflow: auto !important;
	}
</style>
